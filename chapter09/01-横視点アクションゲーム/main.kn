{ 横視点アクションゲーム }

class Player(game@Rect)
	+var toRight: bool
end class

; メイン画面と描画用
var wndMain: wnd@Wnd
var drawMain: wnd@Draw
; 背景とプレイヤー画像
var texBack: draw@Tex
var texPlayer: draw@Tex
; プレイヤー本体とマップ用
var player: @Player
var texMap: draw@Tex
var map: game@Map

func main()
	; 各変数の初期化(グローバル変数の参照のため、先頭に@があります)
	do @wndMain :: wnd@makeWnd(null, %aspect, 1600, 900, "Title")
	do @drawMain :: wnd@makeDraw(@wndMain, 0, 0, 1600, 900, %scale, %scale, false)
	do @texBack :: draw@makeTex("res/dot_back_side.png")
	do @texPlayer :: draw@makeTex("res/dot_kuina_chan.png")
	do @texMap :: draw@makeTex("res/dot_map_chips_side.png")
	do @map :: game@makeMap("res/map_sample_side.txt", 64.0, 64.0)
	; プレイヤーの初期配置
	do @player :: #@Player
	do @player.x :: 96.0
	do @player.y :: 800.0
	do @player.width :: 46.0
	do @player.height :: 116.0
	do @player.toRight :: true
	do draw@sampler(%point)
	; プレイヤーのアニメーションパターン用です
	var pattern: []float :: [0.0, 64.0, 0.0, 128.0]
	
	while(wnd@act())
		; 背景を描きます
		do @texBack.drawScale(0.0, 0.0, 1600.0, 900.0, 0.0, 0.0, 800.0, 450.0, draw@white)
		
		; 左が押されたら、加速度をマイナスにして左へ動かす
		if(input@pad(0, %left) >= 1)
			do @player.veloX :- 0.8
			do @player.toRight :: false
		end if
		
		; 右が押されたら、加速度をプラスにして右へ動かす
		if(input@pad(0, %right) >= 1)
			do @player.veloX :+ 0.8
			do @player.toRight :: true
		end if
		
		; Aボタンが押された時間が1～6フレームで、かつプレイヤーが接地ならジャンプする
		if(input@pad(0, %a) >= 1 & input@pad(0, %a) <= 6 & @player.hitBottom())
			do @player.veloY :: -14.0
		end if
		
		; プレイヤーに重力をかけて、ジャンプを緩める
		do @player.veloY :+ 0.4
		
		; かけた加速度を、範囲内に収めるために制限します
		do @player.veloX :: @player.veloX.clamp(-8.0, 8.0)
		do @player.veloY :: @player.veloY.clamp(-14.0, 14.0)
		
		; 衝突判定と結果を反映します
		do @player.move(0.0)
		do game@hitMapRect(@map, @player, getChipInfo, null)
		do @player.update()
		
		func getChipInfo(chip: int, info: game@ChipInfo)
			switch(chip)
				; intの最小値からマイナス1まで
			case lib@intMin to - 1
				; マップチップの形状
				do info.shape :: %none
			case 0, 1
				do info.shape :: %rect
				; 固有の摩擦係数
				do info.solidFriction :: 0.2
			case 2
				do info.shape :: %triLeftTop
				do info.solidFriction :: 0.1
			case 6
				do info.shape :: %rect
				do info.solidFriction :: 0.0
			case 7
				do info.shape :: %rect
				do info.solidFriction :: 0.2
				; 反発係数
				do info.repulsion :: 0.95
			end switch
			; 空気抵抗
			do info.fluidFriction :: 0.98
		end func
		
		; draw@cnt()で、フレームごとに画像を変えてアニメーションしているように見せます
		do @texPlayer.drawScale(@player.x - 64.0, @player.y - 64.0, 128.0, 128.0, pattern[draw@cnt() / 12 % 4], @player.toRight ?(128.0, 0.0), 64.0, 64.0, draw@white)
		for y(0, 14)
			for x(0, 25)
				; チップの値ごとに画像を差し替えてマップを描画します
				var chip: int :: @map.get(x, y)
				if(chip >= 0)
					do @texMap.drawScale(x $ float * 64.0 - 32.0, y $ float * 64.0 - 32.0, 64.0, 64.0, chip $ float * 32.0, 0.0, 32.0, 32.0, draw@white)
				end if
			end for
		end for
		; 60フレームで描画する
		do draw@render(60)
	end while
end func
